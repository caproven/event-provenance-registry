package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"gitlab.sas.com/async-event-infrastructure/server/pkg/models"
	"gitlab.sas.com/async-event-infrastructure/server/pkg/storage"
	"gitlab.sas.com/async-event-infrastructure/server/pkg/utils"
)

// CreateEvent is the resolver for the create_event field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input models.EventInput) (*models.Event, error) {
	panic(fmt.Errorf("not implemented: CreateEvent - create_event"))
}

// CreateEventReceiver is the resolver for the create_event_receiver field.
func (r *mutationResolver) CreateEventReceiver(ctx context.Context, input models.EventReceiverInput) (*models.EventReceiver, error) {
	eventReceiver := storage.EventReceiver{
		ID:          "2",
		Name:        input.Name,
		Type:        input.Type,
		Version:     input.Version,
		Description: input.Description,
	}

	response, err := storage.CreateEventReceiver(r.Database.Client, eventReceiver)
	if err != nil {
		return nil, err
	}
	fmt.Printf("Created: %+v", response)

	return &models.EventReceiver{
		ID:          utils.NewULIDAsString(),
		Name:        response.Name,
		Type:        response.Type,
		Version:     response.Version,
		Description: response.Description,
	}, nil
}

// CreateEventReceiverGroup is the resolver for the create_event_receiver_group field.
func (r *mutationResolver) CreateEventReceiverGroup(ctx context.Context, input models.EventReceiverGroupInput) (*models.EventReceiverGroup, error) {
	panic(fmt.Errorf("not implemented: CreateEventReceiverGroup - create_event_receiver_group"))
}

// SetEventReceiverGroupEnabled is the resolver for the set_event_receiver_group_enabled field.
func (r *mutationResolver) SetEventReceiverGroupEnabled(ctx context.Context, id string) (*string, error) {
	panic(fmt.Errorf("not implemented: SetEventReceiverGroupEnabled - set_event_receiver_group_enabled"))
}

// SetEventReceiverGroupDisabled is the resolver for the set_event_receiver_group_disabled field.
func (r *mutationResolver) SetEventReceiverGroupDisabled(ctx context.Context, id string) (*string, error) {
	panic(fmt.Errorf("not implemented: SetEventReceiverGroupDisabled - set_event_receiver_group_disabled"))
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*models.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// EventReceiver is the resolver for the event_receiver field.
func (r *queryResolver) EventReceiver(ctx context.Context, id string) (*models.EventReceiver, error) {
	panic(fmt.Errorf("not implemented: EventReceiver - event_receiver"))
}

// EventReceiverGroup is the resolver for the event_receiver_group field.
func (r *queryResolver) EventReceiverGroup(ctx context.Context, id string) (*models.EventReceiverGroup, error) {
	panic(fmt.Errorf("not implemented: EventReceiverGroup - event_receiver_group"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) UpdateEventReceiverGroup(ctx context.Context, id string, input models.EventReceiverGroupInput) (*models.EventReceiverGroup, error) {
	panic(fmt.Errorf("not implemented: UpdateEventReceiverGroup - update_event_receiver_group"))
}
func (r *mutationResolver) UpdateEvent(ctx context.Context, id string, input models.EventInput) (*models.Event, error) {
	panic(fmt.Errorf("not implemented: UpdateEvent - update_event"))
}
func (r *mutationResolver) DeleteEvent(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEvent - delete_event"))
}
func (r *mutationResolver) UpdateEventReceiver(ctx context.Context, id string, input models.EventReceiverInput) (*models.EventReceiver, error) {
	panic(fmt.Errorf("not implemented: UpdateEventReceiver - update_event_receiver"))
}
func (r *mutationResolver) DeleteEventReceiver(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEventReceiver - delete_event_receiver"))
}
func (r *mutationResolver) DeleteEventReceiverGroup(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEventReceiverGroup - delete_event_receiver_group"))
}
func (r *mutationResolver) AddEventReceiverToEventReceiverGroup(ctx context.Context, eventReceiverGroup string, eventReceiver string) (*bool, error) {
	panic(fmt.Errorf("not implemented: AddEventReceiverToEventReceiverGroup - add_event_receiver_to_event_receiver_group"))
}
func (r *mutationResolver) RemoveEventReceiverFromEventReceiverGroup(ctx context.Context, eventReceiverGroup string, eventReceiver string) (*bool, error) {
	panic(fmt.Errorf("not implemented: RemoveEventReceiverFromEventReceiverGroup - remove_event_receiver_from_event_receiver_group"))
}
