scalar Time

directive @goTag(
	key: String!
	value: String
) on FIELD_DEFINITION

# returned items
type Event {
  ID: ID! @goTag(key: "gorm", value: "type~varchar(255);primary_key")
  name: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  version: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  release: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  platform_id: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  package: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  description: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  payload: String! @goTag(key: "gorm", value: "type~longblob;not null")
  event_receiver_id: EventReceiver!
  success: Boolean! @goTag(key: "gorm", value: "not null")
  created_at: Time @goTag(key: "gorm", value: "type~timestamptz;not null;default~CURRENT_TIMESTAMP")
}

type EventReceiver {
  ID: ID! @goTag(key: "gorm", value: "type~varchar(255);primary_key")
  name: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  type: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  version: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  description: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  schema: String! @goTag(key: "gorm", value: "type~longblob;not null")
  fingerprint: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  created_at: Time @goTag(key: "gorm", value: "type~timestamptz;not null;default~CURRENT_TIMESTAMP")
}

type EventReceiverGroup {
  ID: ID! @goTag(key: "gorm", value: "type~varchar(255);primary_key")
  name: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  type: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  version: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  description: String! @goTag(key: "gorm", value: "type~varchar(255);not null")
  enabled: Boolean! @goTag(key: "gorm", value: "not null")
  event_receivers: [EventReceiver!]! # ?
  created_at: Time @goTag(key: "gorm", value: "type~timestamptz;not null;default~CURRENT_TIMESTAMP")
  updated_at: Time @goTag(key: "gorm", value: "type~timestamptz;not null;default~CURRENT_TIMESTAMP")
}

# inputs
input EventInput {
  name: String!
  version: String!
  release: String!
  platformID: String!
  package: String!
  description: String!
  payload: String!
  event_receiver_id: ID!
  success: Boolean!
}

input EventReceiverInput {
  name: String!
  type: String!
  version: String!
  description: String!
  schema: String! #jsonb
}

input EventReceiverGroupInput {
  name: String!
  type: String!
  version: String!
  description: String!
  enabled: Boolean!
  event_receiver_ids: [ID!]!
}

type Query {
  event(ID: ID!): Event
  event_receiver(ID: ID!): EventReceiver
  event_receiver_group(ID: ID!): EventReceiverGroup
}

type Mutation {
  create_event(input: EventInput!): Event
  create_event_receiver(input: EventReceiverInput!): EventReceiver
  create_event_receiver_group(input: EventReceiverGroupInput!): EventReceiverGroup

  # ID is nullable, so it will operate as null
  set_event_receiver_group_enabled(ID: ID!): ID
  set_event_receiver_group_disabled(ID: ID!): ID
}

